import java.text.SimpleDateFormat
import ml.darubyminer360.gradleutils.GradleUtils

plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'me.champeau.jmh' version '0.6.4'
    id 'org.javamodularity.moduleplugin' version '1.8.3' apply false
    id 'ml.darubyminer360.gradleutils' version '2.2.0'
}
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'org.javamodularity.moduleplugin'

repositories {
    mavenCentral()
    maven {
        name = 'Cloud'
        url = 'https://maven.cloudmc.ml/releases/'
    }
    maven {
        name = 'forge'
        url = 'https://maven.minecraftforge.net/'
    }
}

sourceSets {
    api
    testJars
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    // exclude all tests for now
    exclude '**/*'
    useJUnitPlatform()
    moduleOptions {
        addOpens = [
                'cpw.mods.modlauncher/cpw.mods.modlauncher': 'powermock.reflect',
                'java.base/java.lang': 'powermock.reflect'
        ]
    }
}

compileTestJava {
    // exclude all tests - not compatible with modular system
    exclude '/**/*'
    moduleOptions {
        addExports = ['cpw.mods.modlauncher.testjars/cpw.mods.modlauncher.testjar': 'cpw.mods.modlauncher.test']
        addReads = ['cpw.mods.modlauncher.test':'cpw.mods.modlauncher.testjars']
    }
}
//jacoco {
//    toolVersion = '0.8.2'
//}

group = 'ml.cloudmc'
ext.asmVersion = 9.1

compileJava {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

// Shouldn't ever have another version in 9, so this doesn't matter too much
//version = grgit.describe(longDescr: true).split('-').with { "${it[0]}.${it[1]}" }
version = "9.0.33"

dependencies {
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4')
    compileOnly('org.jetbrains:annotations:21.0.0')
    apiCompileOnly('org.jetbrains:annotations:21.0.0')
    api("org.ow2.asm:asm:${asmVersion}")
    api("org.ow2.asm:asm-tree:${asmVersion}")
    api("org.ow2.asm:asm-commons:${asmVersion}")
    apiImplementation("org.ow2.asm:asm:${asmVersion}")
    apiImplementation("org.ow2.asm:asm-tree:${asmVersion}")
    apiImplementation("org.ow2.asm:asm-commons:${asmVersion}")
    implementation('org.apache.logging.log4j:log4j-api:2.14.1')
    implementation('org.apache.logging.log4j:log4j-core:2.14.1')
    implementation('cpw.mods:grossjava9hacks:2.0.7')
    implementation(sourceSets.api.output)
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.+')
    testImplementation('org.powermock:powermock-core:2.0.+')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.7.+')
    testCompileOnly(sourceSets.testJars.output)
    testCompileOnly('org.jetbrains:annotations:21.0.0')
    jmhImplementation('org.powermock:powermock-core:2.0.+')
    jmhImplementation("org.ow2.asm:asm:${asmVersion}")
    jmhImplementation("org.ow2.asm:asm-tree:${asmVersion}")
    jmhImplementation("org.ow2.asm:asm-commons:${asmVersion}")
    jmh("org.ow2.asm:asm:${asmVersion}")
    jmh('org.openjdk.jmh:jmh-core:1.31')
    jmh('org.openjdk.jmh:jmh-generator-bytecode:1.31')
}

task apiJar(type: Jar) {
    archiveClassifier = 'api'
    from sourceSets.api.output
}

task apiSourcesJar(type: Jar) {
    archiveClassifier = 'apisource'
    from sourceSets.api.allSource
}

task testsJar(type: Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

jmh {
    includes = [ 'cpw.mods.modlauncher.benchmarks.TransformBenchmark' ]
    benchmarkMode = ['avgt' ]
    profilers = [ 'stack' ]
    timeOnIteration = '3s'
    warmup = '3s'
    warmupIterations = 3
    iterations = 3
    fork = 3
    timeUnit = 'us'
}

tasks['jmh'].dependsOn(clean)

ext.sharedManifest = manifest {
    attributes(['Specification-Title': 'modlauncher',
                'Specification-Vendor': 'forge',
                'Specification-Version': '7.0', // We are version 7 of the modlauncher specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${project.version}+${System.getenv('BUILD_NUMBER')?:0}+${grgit.branch.current().getName()}.${grgit.head().abbreviatedId}",
                'Implementation-Vendor' :'forge',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': grgit.head().abbreviatedId,
                'Git-Branch': grgit.branch.current().getName(),
                'Build-Number': "${System.getenv('BUILD_NUMBER')?:0}" ],
            'cpw/mods/modlauncher/api/')
    attributes(['Specification-Title': 'modlauncherserviceapi',
                'Specification-Vendor': 'forge',
                'Specification-Version': '7.0', // We are version 7 of the modlauncher serviceapi specification
                "Implementation-Title": project.name,
                'Implementation-Version': "${project.version}+${System.getenv('BUILD_NUMBER')?:0}+${grgit.branch.current().getName()}.${grgit.head().abbreviatedId}",
                'Implementation-Vendor' :'forge',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': grgit.head().abbreviatedId,
                'Git-Branch': grgit.branch.current().getName(),
                'Build-Number': "${System.getenv('BUILD_NUMBER')?:0}"],
            'cpw/mods/modlauncher/serviceapi/')
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
}

artifacts {
    archives apiJar
    archives apiSourcesJar
    archives testsJar
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact apiJar
            artifact apiSourcesJar
            artifact sourcesJar
            pom {
                name = 'Mod Launcher'
                description = 'Common ModLauncher framework'
                url = 'https://github.com/CloudLoaderMC/ModLauncher'
                scm {
                    url = 'https://github.com/CloudLoaderMC/ModLauncher'
                    connection = 'scm:git:git://github.com/CloudLoaderMC/ModLauncher.git'
                    developerConnection = 'scm:git:git@github.com:CloudLoaderMC/ModLauncher.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/CloudLoaderMC/ModLauncher/issues'
                }

                developers {
                    developer {
                        id = 'DaRubyMiner360'
                        name = 'DaRubyMiner360'
                    }
                }
            }
        }
    }
    repositories {
        maven GradleUtils.getPublishingCloudMaven(project)
    }
}